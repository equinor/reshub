#!/bin/csh
# -----------------------------------------------------------------------------
# cdproject
#
# Description:
#   This script allows you to navigate to project directories easily.
#   It reads directories from ~/project_paths.txt, filters them based on a given pattern,
#   and presents a numbered list of matching directories to choose from.

#   The selected path is written to a file. The path can picked up by an alias
#   defined in the ~/.cshrc file to change directory to that path:
#
#   alias cdp 'cdproject \!* && set sel_path=`cat ~/.selected_path` && cd "$sel_path" && unset sel_path'
#
#   The file with the project directories may contain comment lines starting with
#   '#' to structure the file. In addition, tags can be added in each line by
#   adding a '#' after the path and adding some tags. The tags are included in
#   the filtering.
#
# Example .project_paths file:
#
#   # Snorre Sim2Seis
#   /project/snorre/reservoirmodels/ff
#   /project/snorre/reservoirmodels/ff/users/abec
#   /scratch/coviz_sn/abec  # snorre
#
#   # Vigdis Brent Sim2Seis
#   /project/pl089/vigdis_area/resmod/brent/ff
#   /project/pl089/vigdis_area/resmod/brent/ff/users/abec
#   /scratch/vigdis/vm/users/abec
#
# Usage:
#   cdproject [filter]
#
# Options:
#   [filter]  A search string to filter directories with 'grep -i -E'
#             (case-insensitive, extended grep pattern syntax).
#
# Examples:
#   1. List all paths:
#       cdproject
#
#   2. Filter paths on 'snorre':
#       cdproject snorre
#
#   3. Filter paths on 'snorre' and 'vig':
#       cdproject 'snorre|vig'
#
# Author:
#   ABEC, 01/2025
#
# -----------------------------------------------------------------------------

# File where the selected directory is stored
set save_file = ~/.selected_path

# File with project directories
set path_file = ~/.project_paths

if (! -e $path_file) then
    echo "Path file does not exist: $path_file"
    exit 1
endif

# Set the filter if arguments are passed, otherwise match everything
if ($#argv == 0) then
    set filter = ".*"
else
    set filter = "$*"
endif
# echo "Filter: $filter"

# Filter the paths, ignoring lines starting with '#'
set paths_filt = (`grep -v '^#' $path_file | grep -i -E "$filter"`)

# If no paths are found
if ($#paths_filt == 0) then
    echo "No matching paths found."
    exit 1
endif

# Remove comments and non-existing paths
set paths = ()
foreach path ($paths_filt)
    # Extract only valid directory paths
    if (-d "$path") then
        set paths = ($paths $path)
    endif
end

# Define the ANSI escape codes for nicer formatting
set green = "\033[32m"
set blue = "\033[1;34m"
set magenta = "\033[1;35m"
# set cyan = "\033[1;36m"
# set red = "\033[1;31m"
# set yellow = "\033[1;33m"
# set white = "\033[0;37m"
set italic = "\033[3m"
set reset = "\033[0m"

# Make sure $USER is lowercase for comparison
set _user = `echo $USER | /usr/bin/tr '[:upper:]' '[:lower:]'`

# Display paths with numbers
echo "====================================================================="
echo "      Available paths (user: ${magenta}$USER${reset})"
echo "====================================================================="
@ i = 1
foreach path ($paths)
    # Translate path to lowercase for comparison with lowercase $USER
    set _path = `echo $path | /usr/bin/tr '[:upper:]' '[:lower:]'`

    if ($i < 10) then
        echo -n "  $i  "
    else if ($i < 100) then
        echo -n " $i  "
    else
        echo -n "$i  "
    endif

    # Special formatting when $USER in path or starting with /scratch
    if ("$_path" =~ "/scratch*" && "$_path" =~ "*$_user*") then
        echo "${magenta}${italic}$path  [$i]${reset}"
    else if ("$_path" =~ "*$_user*") then
        echo "${magenta}$path [$i]${reset}"
    else if ("$_path" =~ "/scratch*") then
        echo "${italic}$path [$i]${reset}"
    else
        echo "$path  [$i]"
    endif
    @ i++
end

# Ask for the path number
echo -n "Select path by number: "
set choice = $<

# Validate the choice
if ($choice !~ [0-9]*) then
    echo "Invalid choice."
    exit 1
endif

@ index = $choice

if ($index < 1 || $index > $#paths) then
    echo "Invalid choice. Number out of range."
    exit 1
endif

# Save the selected path to the file
set selected_path = "$paths[$index]"
echo "$selected_path" > "$save_file"
echo "Selected path: $selected_path"
exit 0

